using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Ametrin.Serializer.Generator;

[Generator]
public sealed class SerializerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var nodes = context.SyntaxProvider.ForAttributeWithMetadataName("Ametrin.Serializer.GenerateSerializerAttribute", (node, _) => node is ClassDeclarationSyntax or StructDeclarationSyntax, (ctx, cancellationToken) =>
        {
            return (INamedTypeSymbol)ctx.SemanticModel.GetDeclaredSymbol(ctx.TargetNode, cancellationToken)!;
        });

        context.RegisterSourceOutput(nodes, static (context, type) =>
        {
            var serializeMembers = type.GetMembers().Where(static member => member.HasAttribute(IsSerializeAttribute));

            var sb = new StringBuilder();

            sb.AppendLine("""
            using Ametrin.Serializer;
            using System.Text.Json;

            """);

            if (!type.ContainingNamespace.IsGlobalNamespace)
            {
                sb.AppendLine($"namespace {type.ContainingNamespace};");
                sb.AppendLine();
            }

            sb.AppendLine($$"""
            // This file is auto-generated by Ametrin's SerializerGenerator
            
            partial {{type.TypeKind.ToString().ToLower()}} {{type.Name}} : IAmetrinSerializable<{{type.Name}}>
            {
                private {{type.Name}}({{string.Join(", ", serializeMembers.Select(member => $"{GetMemberType(member)} {member.Name.ToLower()}"))}})
                {
            {{string.Join("\n", serializeMembers.Select(member => $"\t\t{member.Name} = {member.Name.ToLower()};"))}}
                }

                public static void Serialize({{type.Name}} self, IAmetrinWriter writer)
                {
            """);
            foreach (var member in serializeMembers)
            {
                var memberType = GetMemberType(member);

                sb.AppendLine(memberType switch
                {
                    { SpecialType: not SpecialType.None } => $"\t\twriter.Write{memberType.Name}Property(\"{member.Name}\", self.{member.Name});",
                    _ => throw new InvalidCastException($"Unsupported member type {memberType}"),
                });
            }
            sb.AppendLine($$"""
                }

                public static {{type.Name}} Deserialize(IAmetrinReader reader)
                {
                    return new(
                        {{string.Join(",\n\t\t\t", serializeMembers.Select(member =>
                            {
                                var memberType = GetMemberType(member);
                                return memberType switch
                                {
                                    { SpecialType: not SpecialType.None } => $"reader.Read{memberType.Name}Property(\"{member.Name}\")",
                                    _ => throw new InvalidCastException($"Unsupported member type {memberType}"),
                                };
                            }))
                        }}
                    );
            """);

            if (!type.InstanceConstructors.Where(static ctor => !ctor.IsImplicitlyDeclared).Any())
            {
                sb.AppendLine($$"""
                }

                public {{type.Name}}() 
                {
                    // type had no constructors. re-adding implicit constructor  
            """);
            }

            sb.AppendLine($$"""
                }
            }
            """);

            context.AddSource($"{type.Name}.Serializer.g.cs", sb.ToString());
        });
    }

    private static bool IsSerializeAttribute(INamedTypeSymbol attribute) => attribute is { Name: "SerializeAttribute", ContainingAssembly.Name: "Ametrin.Serializer" };
    private static ITypeSymbol GetMemberType(ISymbol member) => member switch
    {
        IPropertySymbol property => property.Type,
        IFieldSymbol property => property.Type,
        _ => throw new InvalidOperationException($"Tried to deserialize a {member}"),
    };
}
